ubuntu 16.04
1. 安裝nvm
  $ sudo apt-get update
  $ sudo apt-get install build-essential libssl-dev
  $ curl -sL https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh -o install_nvm.sh
  $ bash install_nvm.sh
  $ source ~/.profile
2. 查看有哪些node版本可以安裝
  $ nvm ls-remote
  // 安裝 v8.6.0 (此時最新版本)
  $ nvm install 8.6.0
  // 查看安裝了哪些node版本
  $ nvm ls

3. clone node 專案
  $ git clone https://github.com/qazwsx9006/koa_practice.git
4. 安裝 pm2 來控管 node server
  $ npm install -g pm2

5. node 安裝專案
   $ cd koa_practice/
   $ npm install
   // 先跑測試環境檢查是否正確
   $ node app.js
   // 要上生產環境則使用 pm2
   $ pm2 start app.js
   // 檢查 pm2 的狀態
   $ pm2 status

6. 取得ssl 憑證 (使用 letsencrypt)
    // 安裝 letsencrypt 的指令 (letsencrypt 只能用cmd來取得憑證)
   $ sudo apt-get update
   $ sudo apt-get install software-properties-common
   $ sudo add-apt-repository ppa:certbot/certbot
   $ sudo apt-get update
   $ sudo apt-get install certbot
   // 建立憑證
   $ sudo certbot certonly

   // 取的憑證應該會放在這資料夾底下: /etc/letsencrypt/live/$your-domain/

7. 安裝mysql
  $ sudo apt-get install mysql-common mysql-client libmysqlclient-dev mysql-server
  // 登入 mysql 建立一個database
  $ mysql -u root -p
  mysql> CREATE DATABASE your_database_name CHARACTER SET utf8mb4;
  mysql> exit;

8. 壓力測試 透過 apache 小工作 ab 來做測試
  // 在本機上local host 測試可以暫時忽略因為網路連線速度緩慢地問題。
  $ sudo apt-get install apache2-utils
  // GET 測試 (透過get 方法在10個人每個人100個請求, 測試url 的回應速度)
  $ ab -c 10 -n 100 'http://localhost/webhook'

  // POST 測試 (透過post 方法在10個人每個人100個請求, 測試url 的回應速度)
  // 先將post資料寫入檔案 ex: post_data
  $ nano post_data
  // 加上 -p 並指定 post_data 即可測試 post 速度
  $ ab -c 10 -n 100 -p post_data 'http://localhost/webhook'

9. 使用 sequelize (node mysql orm ) 來操作 mysql
  // 因為是安裝在此專案所以從node_modules呼叫指令
  $ node_modules/.bin/sequelize init
  // => 會建立 config/config.json, migrations, models, seeders 4個資料夾
  // 建立User table 的 migration
  $ node_modules/.bin/sequelize model:generate --name User --attributes name:string,userId:string
  // => 會在models 建立 user.js 以及在 migration 建立記錄
  // 將migration 做db操作
  $ node_modules/.bin/sequelize db:migrate
  // rollbak db:migrate
  $ node_modules/.bin/sequelize db:migrate:undo

  ps: node_modules/.bin/sequelize 預設 會到 config/config.json 抓取資料庫設定。
  因為我不想用 config.json 記錄 資料庫設定。我想用 config/database.json 來記錄資料設定。
  因此指令最後要指定 config 檔案
  $ node_modules/.bin/sequelize db:migrate --config config/database.json

10. 因為使用的雲端主機ram 只有512M 所以跑部分軟體可能會因為記憶體不足crash,
    在使用mysql 時，預設配置是 mysql 獨立安裝在 512M的機器上。所以我的機器在做mysql 的大量操作容易crash，
    因為很少會做大量的操作，所以不打算升級主機。
    再不改變大量操作(變成小量多次操作？)的前提下，主要可以嘗試的方向有兩個 ：
    一，調整mysql.cnf ，使其可以不要使用到這麼大量的記憶體。
    二，使用虛擬記憶體 swap來解決
    以下操作記錄已 ubuntu 16.04 為例
    // 查看目前系統配置的 memory & swap 狀態
    $ free -m
    // 如果看到swap的 total 值為0, 表示沒有啟用 swap。
    // 接下來指令皆需要 sudo 權限
    // 進入 sudo 權限
    $ sudo su
    // 將虛擬記憶體位置指定在 /var/swapfile
    // 並且使用chmod 確保檔案只能被 root 修改。
    // 通常swap 大小會設定為 Ram 的 1~2倍
    $ cd /var
    $ fallocate -l 1G swapfile
    $ chmod 600 swapfile
    // 啟用 swap
    $ mkswap /var/swapfile
    $ swapon /var/swapfile
    // 查看 swap 狀態
    $ swapon -s
    // 如果重開機，swap要重新啟動
    // 輸入以下指令，重開機會自行啟動swap
    $ echo "/var/swapfile    none    swap    sw    0    0" >> /etc/fstab
    // swappiness 參數是一個介於0~100的數值，當數值越接近100，代表系統越積極使用Swap，當數值越接近0，系統將會盡量使用RAM。預設值是 60
    // 查看現在的swappiness數值
    $ cat /proc/sys/vm/swappiness
    // 因為是VPS所以不用保留ram，所以修改swappiness數值
    $ sysctl vm.swappiness=10
    // 重新開機後 swappiness 值變回預設值，輸入以下指令，重開機後也能保留修改過後的 swappiness值
    $ echo "vm.swappiness = 10" >> /etc/sysctl.conf
  <swap參考資料 http://fonger.logdown.com/posts/2015/02/01/setting-swap-for-ubuntu-to-solve-out-of-memory >




